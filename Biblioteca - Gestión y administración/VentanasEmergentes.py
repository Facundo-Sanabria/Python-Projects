#Este es el módulo donde almaceno las estructuras de todas las ventanas emergentes

import tkinter as tk
from tkinter import messagebox as mb
from tkinter import scrolledtext as st
import BD
import datetime

class CargarLibro:
    def __init__(self):
        self.ventana21 = tk.Tk()
        self.ventana21.title("Cargar nuevo libro")
        self.ventana21.wm_iconbitmap("logo.ico")
        self.ventana21.config(bg='#ccd9cf')
        self.cone = BD.ConnectionDB()
        self.cuadroc1 = tk.LabelFrame(self.ventana21,text="Carguemos",background='#ccd9cf',fg="#0b1828",font=("Gill Sans Light", 10,"bold"))
        self.cuadroc1.grid(column=0,row=0,padx=4,pady=4)
        self.labelc1 = tk.Label(self.cuadroc1,text="Título")
        self.labelc1.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc1.grid(column=0,row=0)
        self.datoc1 = tk.StringVar()
        self.entryc1 = tk.Entry(self.cuadroc1, textvariable = self.datoc1)
        self.entryc1.grid(column=0,row=1)
        self.labelc2 = tk.Label(self.cuadroc1,text="Autor")
        self.labelc2.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc2.grid(column=1,row=0)
        self.datoc2 = tk.StringVar()
        self.entryc2 = tk.Entry(self.cuadroc1,textvariable=self.datoc2)
        self.entryc2.grid(column=1,row=1)
        self.labelc3 = tk.Label(self.cuadroc1,text="Edición")
        self.labelc3.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc3.grid(column=2,row=0)
        self.datoc3 = tk.StringVar()
        self.entryc3 = tk.Entry(self.cuadroc1,textvariable=self.datoc3)
        self.entryc3.grid(column=2,row=1)
        self.labelc4 = tk.Label(self.cuadroc1,text="Lugar de impresión")
        self.labelc4.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc4.grid(column=3,row=0)
        self.datoc4 = tk.StringVar()
        self.entryc4 = tk.Entry(self.cuadroc1,textvariable=self.datoc4)
        self.entryc4.grid(column=3,row=1)
        self.labelc5 = tk.Label(self.cuadroc1,text="Editorial")
        self.labelc5.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc5.grid(column=0,row=2)
        self.datoc5 = tk.StringVar()
        self.entryc5 = tk.Entry(self.cuadroc1,textvariable=self.datoc5)
        self.entryc5.grid(column=0,row=3)
        self.labelc6 = tk.Label(self.cuadroc1,text="Traducido")
        self.labelc6.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc6.grid(column=1,row=2)
        self.datoc6 = tk.StringVar()
        self.entryc6 = tk.Entry(self.cuadroc1,textvariable=self.datoc6)
        self.entryc6.grid(column=1,row=3)
        self.labelc7 = tk.Label(self.cuadroc1,text="Total de páginas")
        self.labelc7.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc7.grid(column=2,row=2)
        self.datoc7 = tk.StringVar()
        self.entryc7 = tk.Entry(self.cuadroc1,textvariable=self.datoc7)
        self.entryc7.grid(column=2,row=3)
        self.labelc8 = tk.Label(self.cuadroc1,text="Condición")
        self.labelc8.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelc8.grid(column=3,row=2)
        self.datoc8 = tk.StringVar()
        self.entryc8 = tk.Entry(self.cuadroc1,textvariable=self.datoc8)
        self.entryc8.grid(column=3,row=3)
        self.botonc1=tk.Button(self.ventana21,text="Cargar",bg='#9bc0b9',command=self.altalibro)
        self.botonc1.grid(column=0,row=1,padx=4,pady=4)
        self.ventana21.mainloop()
    def altalibro(self):
        try:
            datosalta = (self.entryc1.get(),self.entryc2.get(),int(self.entryc3.get()),self.entryc4.get(),self.entryc5.get(),self.entryc6.get(),int(self.entryc7.get()),self.entryc8.get())
            self.cone.alta(datosalta)
            self.ventana21.destroy()
            mb.showinfo("Carga completa","Nuevo libro cargado")
        except:
            mb.showerror("Carga incompleta","Datos erroneos")

class ModificarLibro:
    def __init__(self):
        self.ventana22 = tk.Tk()
        self.ventana22.title("Cargar nuevo libro")
        self.ventana22.wm_iconbitmap("logo.ico")
        self.ventana22.config(bg='#ccd9cf')
        self.cone = BD.ConnectionDB()
        self.cuadrom1 = tk.LabelFrame(self.ventana22,text="Modifiquemos",background='#ccd9cf',fg="#0b1828",font=("Gill Sans Light", 10,"bold"))
        self.cuadrom1.grid(column=0,row=0,padx=4,pady=4)
        self.labelm1 = tk.Label(self.cuadrom1,text="Título")
        self.labelm1.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm1.grid(column=0,row=0)
        self.datom1 = tk.StringVar()
        self.entrym1 = tk.Entry(self.cuadrom1,textvariable=self.datom1)
        self.entrym1.grid(column=0,row=1)
        self.labelm2 = tk.Label(self.cuadrom1,text="Autor")
        self.labelm2.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm2.grid(column=1,row=0)
        self.datom2 = tk.StringVar()
        self.entrym2 = tk.Entry(self.cuadrom1)
        self.entrym2.grid(column=1,row=1)
        self.labelm3 = tk.Label(self.cuadrom1,text="Edición")
        self.labelm3.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm3.grid(column=2,row=0)
        self.datom3 = tk.StringVar()
        self.entrym3 = tk.Entry(self.cuadrom1)
        self.entrym3.grid(column=2,row=1)
        self.labelm4 = tk.Label(self.cuadrom1,text="Lugar de impresión")
        self.labelm4.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm4.grid(column=3,row=0)
        self.datom4 = tk.StringVar()
        self.entrym4 = tk.Entry(self.cuadrom1)
        self.entrym4.grid(column=3,row=1)
        self.labelm5 = tk.Label(self.cuadrom1,text="Editorial")
        self.labelm5.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm5.grid(column=0,row=2)
        self.datom5 = tk.StringVar()
        self.entrym5 = tk.Entry(self.cuadrom1)
        self.entrym5.grid(column=0,row=3)
        self.labelm6 = tk.Label(self.cuadrom1,text="Traducido")
        self.labelm6.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm6.grid(column=1,row=2)
        self.datom6 = tk.StringVar()
        self.entrym6 = tk.Entry(self.cuadrom1)
        self.entrym6.grid(column=1,row=3)
        self.labelm7 = tk.Label(self.cuadrom1,text="Total de páginas")
        self.labelm7.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm7.grid(column=2,row=2)
        self.datom7 = tk.StringVar()
        self.entrym7 = tk.Entry(self.cuadrom1)
        self.entrym7.grid(column=2,row=3)
        self.labelm8 = tk.Label(self.cuadrom1,text="Condición")
        self.labelm8.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelm8.grid(column=3,row=2)
        self.datom8 = tk.StringVar()
        self.entrym8 = tk.Entry(self.cuadrom1)
        self.entrym8.grid(column=3,row=3)
        self.botonc1=tk.Button(self.ventana22,text="Modificar",bg='#9bc0b9',fg="#0b1828",command=self.modificalibro)
        self.botonc1.grid(column=0,row=1,padx=4,pady=4)
        self.ventana22.mainloop()
    def modificalibro(self):
        p = (str(self.entrym1.get()),)
        print(p)
        lista = self.cone.consulta(p)
        if len(lista) > 0:
            try:
                datosnuevos = (self.entrym2.get(),int(self.entrym3.get()),self.entrym4.get(),self.entrym5.get(),self.entrym6.get(),int(self.entrym7.get()),self.entrym8.get(),self.entrym1.get())
                self.cone.modifica(datosnuevos)
                self.ventana22.destroy()
                mb.showinfo("Modificación completa","Libro modificado")
            except:
                mb.showerror("Modificación incompleta","Datos erróneos")
        else:
            mb.showerror("Modificación incompleta","Libro no encontrado")

class EliminarLibro:
    def __init__(self):
        self.ventana23 = tk.Tk()
        self.ventana23.title("Cargar nuevo libro")
        self.ventana23.wm_iconbitmap("logo.ico")
        self.ventana23.config(bg='#ccd9cf')
        self.cone = BD.ConnectionDB()
        self.cuadroe1 = tk.LabelFrame(self.ventana23,text="Eliminar",background='#ccd9cf',fg="#0b1828",font=("Gill Sans Light", 10,"bold"))
        self.cuadroe1.grid(column=0,row=0,padx=4,pady=4)
        self.labele1 = tk.Label(self.cuadroe1,text="Ingrese el título del libro:")
        self.labele1.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labele1.grid(column=0,row=0,padx=4,pady=4)
        self.datoe1 = tk.StringVar()
        self.entrye1 = tk.Entry(self.cuadroe1)
        self.entrye1.grid(column=1,row=0,padx=4,pady=4)
        self.botone1=tk.Button(self.ventana23,text="Eliminar",bg='#9bc0b9',fg="#0b1828",command=self.eliminarlibro)
        self.botone1.grid(column=1,row=1,padx=4,pady=4)
        self.ventana23.mainloop()
    def eliminarlibro(self):
        p = (str(self.entrye1.get()),)
        lista = self.cone.consulta(p)
        if len(lista) > 0:
            self.cone.borrar(p)
            self.ventana23.destroy()
            mb.showinfo("Eliminación completa","Libro borrado")
        else:
            mb.showinfo("Eliminación incompleta","Libro no encontrado")

class CargarPrestamo:
    def __init__(self):
        self.ventana31 = tk.Tk()
        self.ventana31.title("Cargar nuevo préstamo")
        self.ventana31.wm_iconbitmap("logo.ico")
        self.ventana31.config(bg='#ccd9cf')
        self.cone = BD.ConnectionDB()
        self.cuadrocp1 = tk.LabelFrame(self.ventana31,text="Carguemos",background='#ccd9cf',fg="#0b1828",font=("Gill Sans Light", 10,"bold"))
        self.cuadrocp1.grid(column=0,row=0,padx=4,pady=4)
        self.labelcp1 = tk.Label(self.cuadrocp1,text="Título")
        self.labelcp1.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelcp1.grid(column=0,row=0)
        self.datocp1 = tk.StringVar()
        self.entrycp1 = tk.Entry(self.cuadrocp1)
        self.entrycp1.grid(column=0,row=1)
        self.labelcp2 = tk.Label(self.cuadrocp1,text="Nombre")
        self.labelcp2.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelcp2.grid(column=1,row=0)
        self.datocp2 = tk.StringVar()
        self.entrycp2 = tk.Entry(self.cuadrocp1)
        self.entrycp2.grid(column=1,row=1)
        self.labelcp3 = tk.Label(self.cuadrocp1,text="Apellido")
        self.labelcp3.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelcp3.grid(column=2,row=0)
        self.datocp3 = tk.StringVar()
        self.entrycp3 = tk.Entry(self.cuadrocp1)
        self.entrycp3.grid(column=2,row=1)
        self.labelcp4 = tk.Label(self.cuadrocp1,text="Teléfono")
        self.labelcp4.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelcp4.grid(column=3,row=0)
        self.datocp4 = tk.StringVar()
        self.entrycp4 = tk.Entry(self.cuadrocp1)
        self.entrycp4.grid(column=3,row=1)
        self.labelcp5 = tk.Label(self.cuadrocp1,text="E-mail")
        self.labelcp5.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelcp5.grid(column=0,row=2)
        self.datocp5 = tk.StringVar()
        self.entrycp5 = tk.Entry(self.cuadrocp1)
        self.entrycp5.grid(column=0,row=3)
        self.labelcp6 = tk.Label(self.cuadrocp1,text="Dias a prestar")
        self.labelcp6.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labelcp6.grid(column=1,row=2)
        self.datocp6 = tk.StringVar()
        self.entrycp6 = tk.Entry(self.cuadrocp1)
        self.entrycp6.grid(column=1,row=3)
        self.botoncp1=tk.Button(self.ventana31,text="Cargar",bg='#9bc0b9',command=self.altapres)
        self.botoncp1.grid(column=0,row=1,padx=4,pady=4)
        self.ventana31.mainloop()
    def altapres(self):
        dato = (self.entrycp1.get(),)
        j = self.cone.consultacondicion(dato)
        try:
            if j[0] == "Disponible":
                self.n = datetime.date.today()
                datosalta = (self.entrycp1.get(),self.entrycp2.get(),self.entrycp3.get(),self.entrycp4.get(),self.entrycp5.get(),self.n,int(self.entrycp6.get()))
                self.cone.altaprestamo(datosalta)
                datos = ("Prestamo en proceso",self.entrycp1.get())
                self.cone.modificaestado(datos)
                self.ventana31.destroy()
                mb.showinfo("Carga completa","Nuevo préstamo cargado")
            else:
                mb.showinfo("Carga incompleta","Libro no disponible")
        except TypeError:
            mb.showinfo("Carga incompleta","Libro no encontrado")

class Devolver:
    def __init__(self):
        self.ventana32 = tk.Tk()
        self.ventana32.title("Devolver un préstamo")
        self.ventana32.wm_iconbitmap("logo.ico")
        self.ventana32.config(bg='#ccd9cf')
        self.cone = BD.ConnectionDB()
        self.cuadrod1 = tk.LabelFrame(self.ventana32,text="Devolución",background='#ccd9cf',fg="#0b1828",font=("Gill Sans Light", 10,"bold"))
        self.cuadrod1.grid(column=0,row=0,padx=4,pady=4)
        self.labeld1 = tk.Label(self.cuadrod1,text="Ingrese el título del libro:")
        self.labeld1.config(bg='#ccd9cf', font=("Gill Sans Light", 10),fg="#0b1828")
        self.labeld1.grid(column=0,row=0,padx=4,pady=4)
        self.datod1 = tk.StringVar()
        self.entryd1 = tk.Entry(self.cuadrod1)
        self.entryd1.grid(column=1,row=0,padx=4,pady=4)
        self.botond1=tk.Button(self.ventana32,text="Devolver",bg='#9bc0b9',fg="#0b1828",command=self.eliminarpres)
        self.botond1.grid(column=1,row=1,padx=4,pady=4)
        self.ventana32.mainloop()
    def eliminarpres(self):
        p = (str(self.entryd1.get()),)
        lista = self.cone.consultaprestamo(p)
        if len(lista) > 0:
            self.cone.borrarprestamo(p)
            datos = ("Disponible",self.entryd1.get())
            self.cone.modificaestado(datos)
            self.ventana32.destroy()
            mb.showinfo("Devolución completa","Préstamos finalizado")
        else:
            mb.showinfo("Devolución incompleta","Préstamo no encontrado")
    
class Revisar:
    def __init__(self):
        self.ventana33 = tk.Tk()
        self.ventana33.title("Controlar los préstamos")
        self.ventana33.wm_iconbitmap("logo.ico")
        self.ventana33.config(bg='#ccd9cf')
        self.cone = BD.ConnectionDB()
        self.cuadror1 = tk.LabelFrame(self.ventana33,text="Revisar",background='#ccd9cf',fg="#0b1828",font=("Gill Sans Light", 10,"bold"))
        self.cuadror1.grid(column=0,row=0,padx=4,pady=4)
        self.textor1 = st.ScrolledText(self.cuadror1,width=70, height=10)
        self.textor1.grid(column=0,row=0,padx=4,pady=4)
        self.botonr1=tk.Button(self.ventana33,text="Actualizar",bg='#9bc0b9',fg="#0b1828",command=self.control)
        self.botonr1.grid(column=0,row=1,padx=4,pady=4)
        self.ventana33.mainloop()
    def control(self):
        self.lista = self.cone.recuperar_todos_prestamo()
        self.textor1.delete("1.0",tk.END)
        self.texto = "Prestamos Vencidos: \n"
        for x in self.lista:
            fechaentrega = x[5] + datetime.timedelta(days=x[6])
            fechahoy = datetime.date.today()
            if fechaentrega<fechahoy:
                text = f"Título: {str(x[0])} Nombre:{str(x[1])} Apellido{str(x[2])} Teléfono: {str(x[3])} Mail: {str(x[4])} Fecha Prestado: {str(x[5])} Días a prestar: {str(x[6])}\n"
                self.texto += text
        self.textor1.insert("1.0",self.texto)
            